
Eindopdracht_Signaalverwerking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00802000  00000ac8  00000b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00802018  00802018  00000b74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004dd3  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003424  00000000  00000000  00005a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089f  00000000  00000000  00008e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  0000970c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000041b2  00000000  00000000  00009894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000218  00000000  00000000  0000da46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000dc5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_71>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e5       	ldi	r29, 0x5F	; 95
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e8 ec       	ldi	r30, 0xC8	; 200
 214:	fa e0       	ldi	r31, 0x0A	; 10
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a8 31       	cpi	r26, 0x18	; 24
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	20 e2       	ldi	r18, 0x20	; 32
 228:	a8 e1       	ldi	r26, 0x18	; 24
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a2 34       	cpi	r26, 0x42	; 66
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 18 03 	call	0x630	; 0x630 <main>
 23a:	0c 94 62 05 	jmp	0xac4	; 0xac4 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |                   // Select frequency range
 242:	e0 e5       	ldi	r30, 0x50	; 80
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	8b ec       	ldi	r24, 0xCB	; 203
 248:	82 83       	std	Z+2, r24	; 0x02
                 OSC_XOSCSEL_XTAL_16KCLK_gc;                // Select start-up time
  OSC.CTRL |= OSC_XOSCEN_bm;                                // Enable oscillator
 24a:	80 81       	ld	r24, Z
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );                // Wait for oscillator is ready
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	83 ff       	sbrs	r24, 3
 254:	fd cf       	rjmp	.-6      	; 0x250 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (OSC_PLLFAC_gm & 2);   // Select PLL source and multipl. factor
 256:	e0 e5       	ldi	r30, 0x50	; 80
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	82 ec       	ldi	r24, 0xC2	; 194
 25c:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL |= OSC_PLLEN_bm;                                 // Enable PLL
 25e:	80 81       	ld	r24, Z
 260:	80 61       	ori	r24, 0x10	; 16
 262:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );                 // Wait for PLL is ready
 264:	81 81       	ldd	r24, Z+1	; 0x01
 266:	84 ff       	sbrs	r24, 4
 268:	fd cf       	rjmp	.-6      	; 0x264 <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;                                       // Security signature to modify clock
 26a:	88 ed       	ldi	r24, 0xD8	; 216
 26c:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;                            // Select system clock source
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7be040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;                               // Turn off 2MHz internal oscillator
 274:	e0 e5       	ldi	r30, 0x50	; 80
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;                              // Turn off 32MHz internal oscillator
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
 284:	08 95       	ret

00000286 <init_timer>:
float a1[] = {a10, a11, a12};
float a2[] = {a20, a21};


void init_timer(void){
	TCE0.CTRLB     = TC_WGMODE_NORMAL_gc;	// Normal mode
 286:	e0 e0       	ldi	r30, 0x00	; 0
 288:	fa e0       	ldi	r31, 0x0A	; 10
 28a:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLA     = TC_CLKSEL_DIV8_gc;	// prescaling 8 (N = 64)
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	80 83       	st	Z, r24
	//TCE0.INTCTRLA  = TC_OVFINTLVL_MED_gc;	// enable overflow interrupt medium level
	TCE0.PER       = TC_PER;	//(62499/2)*0.002;			// sampletijd ( (62499/2) = 1 sample/seconde).
 290:	8f e9       	ldi	r24, 0x9F	; 159
 292:	9f e0       	ldi	r25, 0x0F	; 15
 294:	86 a3       	std	Z+38, r24	; 0x26
 296:	97 a3       	std	Z+39, r25	; 0x27
 298:	08 95       	ret

0000029a <init_adc>:
}

void init_adc(void){
	PORTA.DIRCLR		= PIN2_bm|PIN3_bm;
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7be602>
	ADCA.CH0.MUXCTRL	= ADC_CH_MUXPOS_PIN2_gc |	// PA2 (PIN A2) to + channel 0
 2a0:	e0 e0       	ldi	r30, 0x00	; 0
 2a2:	f2 e0       	ldi	r31, 0x02	; 2
 2a4:	85 e1       	ldi	r24, 0x15	; 21
 2a6:	81 a3       	std	Z+33, r24	; 0x21
	ADC_CH_MUXNEG_GND_MODE3_gc;						// GND to - channel 0
	ADCA.CH0.CTRL	= ADC_CH_INPUTMODE_DIFF_gc;		// channel 0 differential mode
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.REFCTRL	= ADC_REFSEL_INTVCC_gc;
 2ac:	90 e1       	ldi	r25, 0x10	; 16
 2ae:	92 83       	std	Z+2, r25	; 0x02
	ADCA.CTRLB		= ADC_RESOLUTION_12BIT_gc |
 2b0:	91 83       	std	Z+1, r25	; 0x01
	ADC_CONMODE_bm;				// signed conversion
	ADCA.PRESCALER	= ADC_PRESCALER_DIV16_gc;
 2b2:	84 83       	std	Z+4, r24	; 0x04
	ADCA.EVCTRL		= ADC_SWEEP_0_gc |			// sweep channel 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	83 83       	std	Z+3, r24	; 0x03
	ADC_EVSEL_0123_gc |		// select event channel 0, 1, 2, 3
	ADC_EVACT_CH0_gc;			// event system triggers channel 0
	EVSYS.CH0MUX	= EVSYS_CHMUX_TCE0_OVF_gc;	// Timer overflow E0 event
 2b8:	90 ee       	ldi	r25, 0xE0	; 224
 2ba:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <__TEXT_REGION_LENGTH__+0x7be180>
	ADCA.CH0.INTCTRL	= ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc; // enable ADCA CH0 interrupt when conversion is complete
 2be:	82 a3       	std	Z+34, r24	; 0x22
	ADCA.CTRLA		= ADC_ENABLE_bm;
 2c0:	80 83       	st	Z, r24
 2c2:	08 95       	ret

000002c4 <init_dac>:
}

void init_dac(void){
	DACB.CTRLC = DAC_REFSEL_AVCC_gc;
 2c4:	e0 e2       	ldi	r30, 0x20	; 32
 2c6:	f3 e0       	ldi	r31, 0x03	; 3
 2c8:	88 e0       	ldi	r24, 0x08	; 8
 2ca:	82 83       	std	Z+2, r24	; 0x02
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc;
 2cc:	11 82       	std	Z+1, r1	; 0x01
	DACB.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;
 2ce:	85 e0       	ldi	r24, 0x05	; 5
 2d0:	80 83       	st	Z, r24
 2d2:	08 95       	ret

000002d4 <__vector_71>:
//ADCA.CH0.CTRL |= ADC_CH_START_bm; // start conversion
// 	voltage = (double) res * 1000 * VREF / (MAX_VALUE_ADC + 1);					// Measured voltage in Volts.
// 	if (voltage < 0) voltage = 0;
//}

ISR(ADCA_CH0_vect){
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	0b b6       	in	r0, 0x3b	; 59
 2e0:	0f 92       	push	r0
 2e2:	2f 92       	push	r2
 2e4:	3f 92       	push	r3
 2e6:	4f 92       	push	r4
 2e8:	5f 92       	push	r5
 2ea:	6f 92       	push	r6
 2ec:	7f 92       	push	r7
 2ee:	8f 92       	push	r8
 2f0:	9f 92       	push	r9
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	4f 93       	push	r20
 308:	5f 93       	push	r21
 30a:	6f 93       	push	r22
 30c:	7f 93       	push	r23
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
	PORTC.OUTTGL = PIN0_bm;	//Toggle the LED
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x7be647>
	static float y[2] = {0};
		
	static uint8_t xIndex = 0;
	static uint8_t yIndex = 0; //Wordt ook gebruikt voor x2.
	
	x0[xIndex] = (float)ADCA.CH0.RES;
 324:	70 90 41 20 	lds	r7, 0x2041	; 0x802041 <xIndex.3894>
 328:	07 2d       	mov	r16, r7
 32a:	10 e0       	ldi	r17, 0x00	; 0
 32c:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7be224>
 330:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7be225>
 334:	e8 01       	movw	r28, r16
 336:	cc 0f       	add	r28, r28
 338:	dd 1f       	adc	r29, r29
 33a:	cc 0f       	add	r28, r28
 33c:	dd 1f       	adc	r29, r29
 33e:	9e 01       	movw	r18, r28
 340:	2b 5c       	subi	r18, 0xCB	; 203
 342:	3f 4d       	sbci	r19, 0xDF	; 223
 344:	79 01       	movw	r14, r18
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 3f 04 	call	0x87e	; 0x87e <__floatunsisf>
 34e:	d7 01       	movw	r26, r14
 350:	6d 93       	st	X+, r22
 352:	7d 93       	st	X+, r23
 354:	8d 93       	st	X+, r24
 356:	9c 93       	st	X, r25
 358:	13 97       	sbiw	r26, 0x03	; 3
	x1[xIndex] = 0;
	
	// Eerste deel
	for(uint8_t i = 1; i < 3; i++) {
		x1[xIndex] += b1[2 - i] * x0[(xIndex - i) % 3];
 35a:	78 01       	movw	r14, r16
 35c:	b1 e0       	ldi	r27, 0x01	; 1
 35e:	eb 1a       	sub	r14, r27
 360:	f1 08       	sbc	r15, r1
 362:	c7 5d       	subi	r28, 0xD7	; 215
 364:	df 4d       	sbci	r29, 0xDF	; 223
 366:	c8 01       	movw	r24, r16
 368:	02 97       	sbiw	r24, 0x02	; 2
 36a:	0f 2e       	mov	r0, r31
 36c:	f3 e0       	ldi	r31, 0x03	; 3
 36e:	af 2e       	mov	r10, r31
 370:	b1 2c       	mov	r11, r1
 372:	f0 2d       	mov	r31, r0
 374:	b5 01       	movw	r22, r10
 376:	0e 94 3a 05 	call	0xa74	; 0xa74 <__divmodhi4>
 37a:	fc 01       	movw	r30, r24
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	ee 0f       	add	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	eb 5c       	subi	r30, 0xCB	; 203
 386:	ff 4d       	sbci	r31, 0xDF	; 223
 388:	0f 2e       	mov	r0, r31
 38a:	fc e0       	ldi	r31, 0x0C	; 12
 38c:	cf 2e       	mov	r12, r31
 38e:	f0 e2       	ldi	r31, 0x20	; 32
 390:	df 2e       	mov	r13, r31
 392:	f0 2d       	mov	r31, r0
 394:	d6 01       	movw	r26, r12
 396:	2d 91       	ld	r18, X+
 398:	3d 91       	ld	r19, X+
 39a:	4d 91       	ld	r20, X+
 39c:	5c 91       	ld	r21, X
 39e:	60 81       	ld	r22, Z
 3a0:	71 81       	ldd	r23, Z+1	; 0x01
 3a2:	82 81       	ldd	r24, Z+2	; 0x02
 3a4:	93 81       	ldd	r25, Z+3	; 0x03
 3a6:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 3aa:	1b 01       	movw	r2, r22
 3ac:	2c 01       	movw	r4, r24
 3ae:	c7 01       	movw	r24, r14
 3b0:	b5 01       	movw	r22, r10
 3b2:	0e 94 3a 05 	call	0xa74	; 0xa74 <__divmodhi4>
 3b6:	fc 01       	movw	r30, r24
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	ee 0f       	add	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	eb 5c       	subi	r30, 0xCB	; 203
 3c2:	ff 4d       	sbci	r31, 0xDF	; 223
 3c4:	d6 01       	movw	r26, r12
 3c6:	14 96       	adiw	r26, 0x04	; 4
 3c8:	2d 91       	ld	r18, X+
 3ca:	3d 91       	ld	r19, X+
 3cc:	4d 91       	ld	r20, X+
 3ce:	5c 91       	ld	r21, X
 3d0:	17 97       	sbiw	r26, 0x07	; 7
 3d2:	60 81       	ld	r22, Z
 3d4:	71 81       	ldd	r23, Z+1	; 0x01
 3d6:	82 81       	ldd	r24, Z+2	; 0x02
 3d8:	93 81       	ldd	r25, Z+3	; 0x03
 3da:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	a9 01       	movw	r20, r18
 3e4:	0e 94 32 03 	call	0x664	; 0x664 <__addsf3>
 3e8:	9b 01       	movw	r18, r22
 3ea:	ac 01       	movw	r20, r24
 3ec:	c2 01       	movw	r24, r4
 3ee:	b1 01       	movw	r22, r2
 3f0:	0e 94 32 03 	call	0x664	; 0x664 <__addsf3>
 3f4:	68 83       	st	Y, r22
 3f6:	79 83       	std	Y+1, r23	; 0x01
 3f8:	8a 83       	std	Y+2, r24	; 0x02
 3fa:	9b 83       	std	Y+3, r25	; 0x03
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f4 e0       	ldi	r31, 0x04	; 4
 400:	cf 2e       	mov	r12, r31
 402:	f0 e2       	ldi	r31, 0x20	; 32
 404:	df 2e       	mov	r13, r31
 406:	f0 2d       	mov	r31, r0
 408:	e7 01       	movw	r28, r14
 40a:	0f 2e       	mov	r0, r31
 40c:	fc e0       	ldi	r31, 0x0C	; 12
 40e:	8f 2e       	mov	r8, r31
 410:	f0 e2       	ldi	r31, 0x20	; 32
 412:	9f 2e       	mov	r9, r31
 414:	f0 2d       	mov	r31, r0
		// Het meest recente monster moet vermenigvuldigt worden met b12, daarna b11, dan b10
	}
	
	for (uint8_t i = 1; i < 3; i++) {
		x1[xIndex] += -a1[i] * x1[(xIndex - i) % 3];
 416:	c8 01       	movw	r24, r16
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	fc 01       	movw	r30, r24
 422:	e7 5d       	subi	r30, 0xD7	; 215
 424:	ff 4d       	sbci	r31, 0xDF	; 223
 426:	7f 01       	movw	r14, r30
 428:	d6 01       	movw	r26, r12
 42a:	2d 90       	ld	r2, X+
 42c:	3d 90       	ld	r3, X+
 42e:	4d 90       	ld	r4, X+
 430:	5d 90       	ld	r5, X+
 432:	6d 01       	movw	r12, r26
 434:	ce 01       	movw	r24, r28
 436:	b5 01       	movw	r22, r10
 438:	0e 94 3a 05 	call	0xa74	; 0xa74 <__divmodhi4>
 43c:	fc 01       	movw	r30, r24
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	e7 5d       	subi	r30, 0xD7	; 215
 448:	ff 4d       	sbci	r31, 0xDF	; 223
 44a:	c2 01       	movw	r24, r4
 44c:	b1 01       	movw	r22, r2
 44e:	90 58       	subi	r25, 0x80	; 128
 450:	20 81       	ld	r18, Z
 452:	31 81       	ldd	r19, Z+1	; 0x01
 454:	42 81       	ldd	r20, Z+2	; 0x02
 456:	53 81       	ldd	r21, Z+3	; 0x03
 458:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 45c:	f7 01       	movw	r30, r14
 45e:	20 81       	ld	r18, Z
 460:	31 81       	ldd	r19, Z+1	; 0x01
 462:	42 81       	ldd	r20, Z+2	; 0x02
 464:	53 81       	ldd	r21, Z+3	; 0x03
 466:	0e 94 32 03 	call	0x664	; 0x664 <__addsf3>
 46a:	d7 01       	movw	r26, r14
 46c:	6d 93       	st	X+, r22
 46e:	7d 93       	st	X+, r23
 470:	8d 93       	st	X+, r24
 472:	9c 93       	st	X, r25
 474:	13 97       	sbiw	r26, 0x03	; 3
 476:	21 97       	sbiw	r28, 0x01	; 1
	for(uint8_t i = 1; i < 3; i++) {
		x1[xIndex] += b1[2 - i] * x0[(xIndex - i) % 3];
		// Het meest recente monster moet vermenigvuldigt worden met b12, daarna b11, dan b10
	}
	
	for (uint8_t i = 1; i < 3; i++) {
 478:	c8 14       	cp	r12, r8
 47a:	d9 04       	cpc	r13, r9
 47c:	a9 f6       	brne	.-86     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		x1[xIndex] += -a1[i] * x1[(xIndex - i) % 3];
	}
	x1[xIndex] /= a10;
 47e:	29 e6       	ldi	r18, 0x69	; 105
 480:	3c e1       	ldi	r19, 0x1C	; 28
 482:	4f e1       	ldi	r20, 0x1F	; 31
 484:	59 e4       	ldi	r21, 0x49	; 73
 486:	0e 94 9e 03 	call	0x73c	; 0x73c <__divsf3>
 48a:	6b 01       	movw	r12, r22
 48c:	7c 01       	movw	r14, r24
 48e:	f8 01       	movw	r30, r16
 490:	ee 0f       	add	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	e7 5d       	subi	r30, 0xD7	; 215
 49a:	ff 4d       	sbci	r31, 0xDF	; 223
 49c:	60 83       	st	Z, r22
 49e:	71 83       	std	Z+1, r23	; 0x01
 4a0:	82 83       	std	Z+2, r24	; 0x02
 4a2:	93 83       	std	Z+3, r25	; 0x03
	
	// Tweede deel
	// Dit kan modulairder maar dan wordt het minder snel.
	// Modulairder is een mooi woord.
	
	x2[yIndex] = b21 * x1[xIndex] + b20 * x2[!xIndex];
 4a4:	b0 90 28 20 	lds	r11, 0x2028	; 0x802028 <yIndex.3895>
 4a8:	cb 2d       	mov	r28, r11
 4aa:	d0 e0       	ldi	r29, 0x00	; 0
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	77 20       	and	r7, r7
 4b2:	11 f0       	breq	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	fc 01       	movw	r30, r24
 4c2:	e0 5e       	subi	r30, 0xE0	; 224
 4c4:	ff 4d       	sbci	r31, 0xDF	; 223
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	3f ef       	ldi	r19, 0xFF	; 255
 4ca:	49 ef       	ldi	r20, 0xF9	; 249
 4cc:	54 ec       	ldi	r21, 0xC4	; 196
 4ce:	60 81       	ld	r22, Z
 4d0:	71 81       	ldd	r23, Z+1	; 0x01
 4d2:	82 81       	ldd	r24, Z+2	; 0x02
 4d4:	93 81       	ldd	r25, Z+3	; 0x03
 4d6:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 4da:	2b 01       	movw	r4, r22
 4dc:	3c 01       	movw	r6, r24
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	3f ef       	ldi	r19, 0xFF	; 255
 4e2:	49 ef       	ldi	r20, 0xF9	; 249
 4e4:	54 e4       	ldi	r21, 0x44	; 68
 4e6:	c7 01       	movw	r24, r14
 4e8:	b6 01       	movw	r22, r12
 4ea:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 4ee:	9b 01       	movw	r18, r22
 4f0:	ac 01       	movw	r20, r24
 4f2:	c3 01       	movw	r24, r6
 4f4:	b2 01       	movw	r22, r4
 4f6:	0e 94 32 03 	call	0x664	; 0x664 <__addsf3>
 4fa:	fe 01       	movw	r30, r28
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	e0 5e       	subi	r30, 0xE0	; 224
 506:	ff 4d       	sbci	r31, 0xDF	; 223
 508:	60 83       	st	Z, r22
 50a:	71 83       	std	Z+1, r23	; 0x01
 50c:	82 83       	std	Z+2, r24	; 0x02
 50e:	93 83       	std	Z+3, r25	; 0x03
	y[yIndex]  = (x2[yIndex] + -a21 * y[!yIndex]) / a20;
 510:	ff 24       	eor	r15, r15
 512:	f3 94       	inc	r15
 514:	b1 10       	cpse	r11, r1
 516:	f1 2c       	mov	r15, r1
 518:	cc 0f       	add	r28, r28
 51a:	dd 1f       	adc	r29, r29
 51c:	cc 0f       	add	r28, r28
 51e:	dd 1f       	adc	r29, r29
 520:	c8 5e       	subi	r28, 0xE8	; 232
 522:	df 4d       	sbci	r29, 0xDF	; 223
 524:	2b e0       	ldi	r18, 0x0B	; 11
 526:	32 e8       	ldi	r19, 0x82	; 130
 528:	4f e2       	ldi	r20, 0x2F	; 47
 52a:	54 e4       	ldi	r21, 0x44	; 68
 52c:	0e 94 31 03 	call	0x662	; 0x662 <__subsf3>
 530:	4b 01       	movw	r8, r22
 532:	5c 01       	movw	r10, r24
 534:	ef 2d       	mov	r30, r15
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	ee 0f       	add	r30, r30
 53a:	ff 1f       	adc	r31, r31
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	e8 5e       	subi	r30, 0xE8	; 232
 542:	ff 4d       	sbci	r31, 0xDF	; 223
 544:	2f ef       	ldi	r18, 0xFF	; 255
 546:	3f ef       	ldi	r19, 0xFF	; 255
 548:	49 ef       	ldi	r20, 0xF9	; 249
 54a:	54 e4       	ldi	r21, 0x44	; 68
 54c:	60 81       	ld	r22, Z
 54e:	71 81       	ldd	r23, Z+1	; 0x01
 550:	82 81       	ldd	r24, Z+2	; 0x02
 552:	93 81       	ldd	r25, Z+3	; 0x03
 554:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 558:	9b 01       	movw	r18, r22
 55a:	ac 01       	movw	r20, r24
 55c:	c5 01       	movw	r24, r10
 55e:	b4 01       	movw	r22, r8
 560:	0e 94 31 03 	call	0x662	; 0x662 <__subsf3>
 564:	20 e0       	ldi	r18, 0x00	; 0
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	5f e3       	ldi	r21, 0x3F	; 63
 56c:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 570:	2f e6       	ldi	r18, 0x6F	; 111
 572:	32 e1       	ldi	r19, 0x12	; 18
 574:	43 e8       	ldi	r20, 0x83	; 131
 576:	5a e3       	ldi	r21, 0x3A	; 58
 578:	0e 94 9e 03 	call	0x73c	; 0x73c <__divsf3>
 57c:	2b e0       	ldi	r18, 0x0B	; 11
 57e:	32 e8       	ldi	r19, 0x82	; 130
 580:	4f e2       	ldi	r20, 0x2F	; 47
 582:	54 e4       	ldi	r21, 0x44	; 68
 584:	0e 94 32 03 	call	0x664	; 0x664 <__addsf3>
 588:	68 83       	st	Y, r22
 58a:	79 83       	std	Y+1, r23	; 0x01
 58c:	8a 83       	std	Y+2, r24	; 0x02
 58e:	9b 83       	std	Y+3, r25	; 0x03

	int16_t out = ADCA.CH0.RES;//(int16_t) y[yIndex];
 590:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x7be224>
 594:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x7be225>

	xIndex = (xIndex + 1) % 3;
 598:	c8 01       	movw	r24, r16
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	63 e0       	ldi	r22, 0x03	; 3
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	0e 94 3a 05 	call	0xa74	; 0xa74 <__divmodhi4>
 5a4:	80 93 41 20 	sts	0x2041, r24	; 0x802041 <xIndex.3894>
	yIndex = !yIndex; 
 5a8:	f0 92 28 20 	sts	0x2028, r15	; 0x802028 <yIndex.3895>
	
	//	</Jochem code>
	
	BinaryValue = out * ADC2DAC; //Bitwaarde
// 	printOut = ADC2DAC;
	DACB.CH0DATA = BinaryValue;			//write &USBDataIn to DAC (PIN A10)
 5ac:	b9 01       	movw	r22, r18
 5ae:	33 0f       	add	r19, r19
 5b0:	88 0b       	sbc	r24, r24
 5b2:	99 0b       	sbc	r25, r25
 5b4:	0e 94 41 04 	call	0x882	; 0x882 <__floatsisf>
 5b8:	20 ec       	ldi	r18, 0xC0	; 192
 5ba:	37 ef       	ldi	r19, 0xF7	; 247
 5bc:	43 e0       	ldi	r20, 0x03	; 3
 5be:	56 e4       	ldi	r21, 0x46	; 70
 5c0:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulsf3>
 5c4:	23 e3       	ldi	r18, 0x33	; 51
 5c6:	33 e3       	ldi	r19, 0x33	; 51
 5c8:	43 ed       	ldi	r20, 0xD3	; 211
 5ca:	55 e4       	ldi	r21, 0x45	; 69
 5cc:	0e 94 9e 03 	call	0x73c	; 0x73c <__divsf3>
 5d0:	0e 94 10 04 	call	0x820	; 0x820 <__fixunssfsi>
 5d4:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <__TEXT_REGION_LENGTH__+0x7be338>
 5d8:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <__TEXT_REGION_LENGTH__+0x7be339>
	while (!DACB.STATUS & DAC_CH0DRE_bm);
 5dc:	e0 e2       	ldi	r30, 0x20	; 32
 5de:	f3 e0       	ldi	r31, 0x03	; 3
 5e0:	85 81       	ldd	r24, Z+5	; 0x05
 5e2:	88 23       	and	r24, r24
 5e4:	e9 f3       	breq	.-6      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	bf 91       	pop	r27
 5f0:	af 91       	pop	r26
 5f2:	9f 91       	pop	r25
 5f4:	8f 91       	pop	r24
 5f6:	7f 91       	pop	r23
 5f8:	6f 91       	pop	r22
 5fa:	5f 91       	pop	r21
 5fc:	4f 91       	pop	r20
 5fe:	3f 91       	pop	r19
 600:	2f 91       	pop	r18
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	ff 90       	pop	r15
 608:	ef 90       	pop	r14
 60a:	df 90       	pop	r13
 60c:	cf 90       	pop	r12
 60e:	bf 90       	pop	r11
 610:	af 90       	pop	r10
 612:	9f 90       	pop	r9
 614:	8f 90       	pop	r8
 616:	7f 90       	pop	r7
 618:	6f 90       	pop	r6
 61a:	5f 90       	pop	r5
 61c:	4f 90       	pop	r4
 61e:	3f 90       	pop	r3
 620:	2f 90       	pop	r2
 622:	0f 90       	pop	r0
 624:	0b be       	out	0x3b, r0	; 59
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <main>:


int main(void){
	PORTC.DIRSET = PIN0_bm;	// the LED (bit 0 on port C) is set as output.
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
	PORTB.DIRSET = PIN2_bm;
 636:	84 e0       	ldi	r24, 0x04	; 4
 638:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x7be621>
	PORTF.DIRSET = PIN0_bm | PIN1_bm;
 63c:	83 e0       	ldi	r24, 0x03	; 3
 63e:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7be6a1>
 *          which has a 16 MHz crystal 
 *
 * \return void
 */
void inline init_clock(void) {
  Config32MHzClock_Ext16M();
 642:	0e 94 21 01 	call	0x242	; 0x242 <Config32MHzClock_Ext16M>

	init_clock();
	init_timer();			// init timer
 646:	0e 94 43 01 	call	0x286	; 0x286 <init_timer>
	init_dac();				// init DAC
 64a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <init_dac>
	init_adc();				// init ADC
 64e:	0e 94 4d 01 	call	0x29a	; 0x29a <init_adc>
		
	PMIC.CTRL     |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm;		// set low and medium level interrupts
 652:	e0 ea       	ldi	r30, 0xA0	; 160
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	82 81       	ldd	r24, Z+2	; 0x02
 658:	83 60       	ori	r24, 0x03	; 3
 65a:	82 83       	std	Z+2, r24	; 0x02
	sei();					//Enable interrupts
 65c:	78 94       	sei
	
	while (1) {
		asm volatile("nop");
 65e:	00 00       	nop
 660:	fe cf       	rjmp	.-4      	; 0x65e <main+0x2e>

00000662 <__subsf3>:
 662:	50 58       	subi	r21, 0x80	; 128

00000664 <__addsf3>:
 664:	bb 27       	eor	r27, r27
 666:	aa 27       	eor	r26, r26
 668:	0e 94 49 03 	call	0x692	; 0x692 <__addsf3x>
 66c:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_round>
 670:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_pscA>
 674:	38 f0       	brcs	.+14     	; 0x684 <__addsf3+0x20>
 676:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscB>
 67a:	20 f0       	brcs	.+8      	; 0x684 <__addsf3+0x20>
 67c:	39 f4       	brne	.+14     	; 0x68c <__addsf3+0x28>
 67e:	9f 3f       	cpi	r25, 0xFF	; 255
 680:	19 f4       	brne	.+6      	; 0x688 <__addsf3+0x24>
 682:	26 f4       	brtc	.+8      	; 0x68c <__addsf3+0x28>
 684:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_nan>
 688:	0e f4       	brtc	.+2      	; 0x68c <__addsf3+0x28>
 68a:	e0 95       	com	r30
 68c:	e7 fb       	bst	r30, 7
 68e:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>

00000692 <__addsf3x>:
 692:	e9 2f       	mov	r30, r25
 694:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_split3>
 698:	58 f3       	brcs	.-42     	; 0x670 <__addsf3+0xc>
 69a:	ba 17       	cp	r27, r26
 69c:	62 07       	cpc	r22, r18
 69e:	73 07       	cpc	r23, r19
 6a0:	84 07       	cpc	r24, r20
 6a2:	95 07       	cpc	r25, r21
 6a4:	20 f0       	brcs	.+8      	; 0x6ae <__addsf3x+0x1c>
 6a6:	79 f4       	brne	.+30     	; 0x6c6 <__addsf3x+0x34>
 6a8:	a6 f5       	brtc	.+104    	; 0x712 <__addsf3x+0x80>
 6aa:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_zero>
 6ae:	0e f4       	brtc	.+2      	; 0x6b2 <__addsf3x+0x20>
 6b0:	e0 95       	com	r30
 6b2:	0b 2e       	mov	r0, r27
 6b4:	ba 2f       	mov	r27, r26
 6b6:	a0 2d       	mov	r26, r0
 6b8:	0b 01       	movw	r0, r22
 6ba:	b9 01       	movw	r22, r18
 6bc:	90 01       	movw	r18, r0
 6be:	0c 01       	movw	r0, r24
 6c0:	ca 01       	movw	r24, r20
 6c2:	a0 01       	movw	r20, r0
 6c4:	11 24       	eor	r1, r1
 6c6:	ff 27       	eor	r31, r31
 6c8:	59 1b       	sub	r21, r25
 6ca:	99 f0       	breq	.+38     	; 0x6f2 <__addsf3x+0x60>
 6cc:	59 3f       	cpi	r21, 0xF9	; 249
 6ce:	50 f4       	brcc	.+20     	; 0x6e4 <__addsf3x+0x52>
 6d0:	50 3e       	cpi	r21, 0xE0	; 224
 6d2:	68 f1       	brcs	.+90     	; 0x72e <__addsf3x+0x9c>
 6d4:	1a 16       	cp	r1, r26
 6d6:	f0 40       	sbci	r31, 0x00	; 0
 6d8:	a2 2f       	mov	r26, r18
 6da:	23 2f       	mov	r18, r19
 6dc:	34 2f       	mov	r19, r20
 6de:	44 27       	eor	r20, r20
 6e0:	58 5f       	subi	r21, 0xF8	; 248
 6e2:	f3 cf       	rjmp	.-26     	; 0x6ca <__addsf3x+0x38>
 6e4:	46 95       	lsr	r20
 6e6:	37 95       	ror	r19
 6e8:	27 95       	ror	r18
 6ea:	a7 95       	ror	r26
 6ec:	f0 40       	sbci	r31, 0x00	; 0
 6ee:	53 95       	inc	r21
 6f0:	c9 f7       	brne	.-14     	; 0x6e4 <__addsf3x+0x52>
 6f2:	7e f4       	brtc	.+30     	; 0x712 <__addsf3x+0x80>
 6f4:	1f 16       	cp	r1, r31
 6f6:	ba 0b       	sbc	r27, r26
 6f8:	62 0b       	sbc	r22, r18
 6fa:	73 0b       	sbc	r23, r19
 6fc:	84 0b       	sbc	r24, r20
 6fe:	ba f0       	brmi	.+46     	; 0x72e <__addsf3x+0x9c>
 700:	91 50       	subi	r25, 0x01	; 1
 702:	a1 f0       	breq	.+40     	; 0x72c <__addsf3x+0x9a>
 704:	ff 0f       	add	r31, r31
 706:	bb 1f       	adc	r27, r27
 708:	66 1f       	adc	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	c2 f7       	brpl	.-16     	; 0x700 <__addsf3x+0x6e>
 710:	0e c0       	rjmp	.+28     	; 0x72e <__addsf3x+0x9c>
 712:	ba 0f       	add	r27, r26
 714:	62 1f       	adc	r22, r18
 716:	73 1f       	adc	r23, r19
 718:	84 1f       	adc	r24, r20
 71a:	48 f4       	brcc	.+18     	; 0x72e <__addsf3x+0x9c>
 71c:	87 95       	ror	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b7 95       	ror	r27
 724:	f7 95       	ror	r31
 726:	9e 3f       	cpi	r25, 0xFE	; 254
 728:	08 f0       	brcs	.+2      	; 0x72c <__addsf3x+0x9a>
 72a:	b0 cf       	rjmp	.-160    	; 0x68c <__addsf3+0x28>
 72c:	93 95       	inc	r25
 72e:	88 0f       	add	r24, r24
 730:	08 f0       	brcs	.+2      	; 0x734 <__addsf3x+0xa2>
 732:	99 27       	eor	r25, r25
 734:	ee 0f       	add	r30, r30
 736:	97 95       	ror	r25
 738:	87 95       	ror	r24
 73a:	08 95       	ret

0000073c <__divsf3>:
 73c:	0e 94 b2 03 	call	0x764	; 0x764 <__divsf3x>
 740:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_round>
 744:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscB>
 748:	58 f0       	brcs	.+22     	; 0x760 <__divsf3+0x24>
 74a:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_pscA>
 74e:	40 f0       	brcs	.+16     	; 0x760 <__divsf3+0x24>
 750:	29 f4       	brne	.+10     	; 0x75c <__divsf3+0x20>
 752:	5f 3f       	cpi	r21, 0xFF	; 255
 754:	29 f0       	breq	.+10     	; 0x760 <__divsf3+0x24>
 756:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 75a:	51 11       	cpse	r21, r1
 75c:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>
 760:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_nan>

00000764 <__divsf3x>:
 764:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_split3>
 768:	68 f3       	brcs	.-38     	; 0x744 <__divsf3+0x8>

0000076a <__divsf3_pse>:
 76a:	99 23       	and	r25, r25
 76c:	b1 f3       	breq	.-20     	; 0x75a <__divsf3+0x1e>
 76e:	55 23       	and	r21, r21
 770:	91 f3       	breq	.-28     	; 0x756 <__divsf3+0x1a>
 772:	95 1b       	sub	r25, r21
 774:	55 0b       	sbc	r21, r21
 776:	bb 27       	eor	r27, r27
 778:	aa 27       	eor	r26, r26
 77a:	62 17       	cp	r22, r18
 77c:	73 07       	cpc	r23, r19
 77e:	84 07       	cpc	r24, r20
 780:	38 f0       	brcs	.+14     	; 0x790 <__divsf3_pse+0x26>
 782:	9f 5f       	subi	r25, 0xFF	; 255
 784:	5f 4f       	sbci	r21, 0xFF	; 255
 786:	22 0f       	add	r18, r18
 788:	33 1f       	adc	r19, r19
 78a:	44 1f       	adc	r20, r20
 78c:	aa 1f       	adc	r26, r26
 78e:	a9 f3       	breq	.-22     	; 0x77a <__divsf3_pse+0x10>
 790:	35 d0       	rcall	.+106    	; 0x7fc <__divsf3_pse+0x92>
 792:	0e 2e       	mov	r0, r30
 794:	3a f0       	brmi	.+14     	; 0x7a4 <__divsf3_pse+0x3a>
 796:	e0 e8       	ldi	r30, 0x80	; 128
 798:	32 d0       	rcall	.+100    	; 0x7fe <__divsf3_pse+0x94>
 79a:	91 50       	subi	r25, 0x01	; 1
 79c:	50 40       	sbci	r21, 0x00	; 0
 79e:	e6 95       	lsr	r30
 7a0:	00 1c       	adc	r0, r0
 7a2:	ca f7       	brpl	.-14     	; 0x796 <__divsf3_pse+0x2c>
 7a4:	2b d0       	rcall	.+86     	; 0x7fc <__divsf3_pse+0x92>
 7a6:	fe 2f       	mov	r31, r30
 7a8:	29 d0       	rcall	.+82     	; 0x7fc <__divsf3_pse+0x92>
 7aa:	66 0f       	add	r22, r22
 7ac:	77 1f       	adc	r23, r23
 7ae:	88 1f       	adc	r24, r24
 7b0:	bb 1f       	adc	r27, r27
 7b2:	26 17       	cp	r18, r22
 7b4:	37 07       	cpc	r19, r23
 7b6:	48 07       	cpc	r20, r24
 7b8:	ab 07       	cpc	r26, r27
 7ba:	b0 e8       	ldi	r27, 0x80	; 128
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <__divsf3_pse+0x56>
 7be:	bb 0b       	sbc	r27, r27
 7c0:	80 2d       	mov	r24, r0
 7c2:	bf 01       	movw	r22, r30
 7c4:	ff 27       	eor	r31, r31
 7c6:	93 58       	subi	r25, 0x83	; 131
 7c8:	5f 4f       	sbci	r21, 0xFF	; 255
 7ca:	3a f0       	brmi	.+14     	; 0x7da <__divsf3_pse+0x70>
 7cc:	9e 3f       	cpi	r25, 0xFE	; 254
 7ce:	51 05       	cpc	r21, r1
 7d0:	78 f0       	brcs	.+30     	; 0x7f0 <__divsf3_pse+0x86>
 7d2:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 7d6:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>
 7da:	5f 3f       	cpi	r21, 0xFF	; 255
 7dc:	e4 f3       	brlt	.-8      	; 0x7d6 <__divsf3_pse+0x6c>
 7de:	98 3e       	cpi	r25, 0xE8	; 232
 7e0:	d4 f3       	brlt	.-12     	; 0x7d6 <__divsf3_pse+0x6c>
 7e2:	86 95       	lsr	r24
 7e4:	77 95       	ror	r23
 7e6:	67 95       	ror	r22
 7e8:	b7 95       	ror	r27
 7ea:	f7 95       	ror	r31
 7ec:	9f 5f       	subi	r25, 0xFF	; 255
 7ee:	c9 f7       	brne	.-14     	; 0x7e2 <__divsf3_pse+0x78>
 7f0:	88 0f       	add	r24, r24
 7f2:	91 1d       	adc	r25, r1
 7f4:	96 95       	lsr	r25
 7f6:	87 95       	ror	r24
 7f8:	97 f9       	bld	r25, 7
 7fa:	08 95       	ret
 7fc:	e1 e0       	ldi	r30, 0x01	; 1
 7fe:	66 0f       	add	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	bb 1f       	adc	r27, r27
 806:	62 17       	cp	r22, r18
 808:	73 07       	cpc	r23, r19
 80a:	84 07       	cpc	r24, r20
 80c:	ba 07       	cpc	r27, r26
 80e:	20 f0       	brcs	.+8      	; 0x818 <__divsf3_pse+0xae>
 810:	62 1b       	sub	r22, r18
 812:	73 0b       	sbc	r23, r19
 814:	84 0b       	sbc	r24, r20
 816:	ba 0b       	sbc	r27, r26
 818:	ee 1f       	adc	r30, r30
 81a:	88 f7       	brcc	.-30     	; 0x7fe <__divsf3_pse+0x94>
 81c:	e0 95       	com	r30
 81e:	08 95       	ret

00000820 <__fixunssfsi>:
 820:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_splitA>
 824:	88 f0       	brcs	.+34     	; 0x848 <__fixunssfsi+0x28>
 826:	9f 57       	subi	r25, 0x7F	; 127
 828:	98 f0       	brcs	.+38     	; 0x850 <__fixunssfsi+0x30>
 82a:	b9 2f       	mov	r27, r25
 82c:	99 27       	eor	r25, r25
 82e:	b7 51       	subi	r27, 0x17	; 23
 830:	b0 f0       	brcs	.+44     	; 0x85e <__fixunssfsi+0x3e>
 832:	e1 f0       	breq	.+56     	; 0x86c <__fixunssfsi+0x4c>
 834:	66 0f       	add	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	88 1f       	adc	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	1a f0       	brmi	.+6      	; 0x844 <__fixunssfsi+0x24>
 83e:	ba 95       	dec	r27
 840:	c9 f7       	brne	.-14     	; 0x834 <__fixunssfsi+0x14>
 842:	14 c0       	rjmp	.+40     	; 0x86c <__fixunssfsi+0x4c>
 844:	b1 30       	cpi	r27, 0x01	; 1
 846:	91 f0       	breq	.+36     	; 0x86c <__fixunssfsi+0x4c>
 848:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_zero>
 84c:	b1 e0       	ldi	r27, 0x01	; 1
 84e:	08 95       	ret
 850:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__fp_zero>
 854:	67 2f       	mov	r22, r23
 856:	78 2f       	mov	r23, r24
 858:	88 27       	eor	r24, r24
 85a:	b8 5f       	subi	r27, 0xF8	; 248
 85c:	39 f0       	breq	.+14     	; 0x86c <__fixunssfsi+0x4c>
 85e:	b9 3f       	cpi	r27, 0xF9	; 249
 860:	cc f3       	brlt	.-14     	; 0x854 <__fixunssfsi+0x34>
 862:	86 95       	lsr	r24
 864:	77 95       	ror	r23
 866:	67 95       	ror	r22
 868:	b3 95       	inc	r27
 86a:	d9 f7       	brne	.-10     	; 0x862 <__fixunssfsi+0x42>
 86c:	3e f4       	brtc	.+14     	; 0x87c <__fixunssfsi+0x5c>
 86e:	90 95       	com	r25
 870:	80 95       	com	r24
 872:	70 95       	com	r23
 874:	61 95       	neg	r22
 876:	7f 4f       	sbci	r23, 0xFF	; 255
 878:	8f 4f       	sbci	r24, 0xFF	; 255
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	08 95       	ret

0000087e <__floatunsisf>:
 87e:	e8 94       	clt
 880:	09 c0       	rjmp	.+18     	; 0x894 <__floatsisf+0x12>

00000882 <__floatsisf>:
 882:	97 fb       	bst	r25, 7
 884:	3e f4       	brtc	.+14     	; 0x894 <__floatsisf+0x12>
 886:	90 95       	com	r25
 888:	80 95       	com	r24
 88a:	70 95       	com	r23
 88c:	61 95       	neg	r22
 88e:	7f 4f       	sbci	r23, 0xFF	; 255
 890:	8f 4f       	sbci	r24, 0xFF	; 255
 892:	9f 4f       	sbci	r25, 0xFF	; 255
 894:	99 23       	and	r25, r25
 896:	a9 f0       	breq	.+42     	; 0x8c2 <__floatsisf+0x40>
 898:	f9 2f       	mov	r31, r25
 89a:	96 e9       	ldi	r25, 0x96	; 150
 89c:	bb 27       	eor	r27, r27
 89e:	93 95       	inc	r25
 8a0:	f6 95       	lsr	r31
 8a2:	87 95       	ror	r24
 8a4:	77 95       	ror	r23
 8a6:	67 95       	ror	r22
 8a8:	b7 95       	ror	r27
 8aa:	f1 11       	cpse	r31, r1
 8ac:	f8 cf       	rjmp	.-16     	; 0x89e <__floatsisf+0x1c>
 8ae:	fa f4       	brpl	.+62     	; 0x8ee <__floatsisf+0x6c>
 8b0:	bb 0f       	add	r27, r27
 8b2:	11 f4       	brne	.+4      	; 0x8b8 <__floatsisf+0x36>
 8b4:	60 ff       	sbrs	r22, 0
 8b6:	1b c0       	rjmp	.+54     	; 0x8ee <__floatsisf+0x6c>
 8b8:	6f 5f       	subi	r22, 0xFF	; 255
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	16 c0       	rjmp	.+44     	; 0x8ee <__floatsisf+0x6c>
 8c2:	88 23       	and	r24, r24
 8c4:	11 f0       	breq	.+4      	; 0x8ca <__floatsisf+0x48>
 8c6:	96 e9       	ldi	r25, 0x96	; 150
 8c8:	11 c0       	rjmp	.+34     	; 0x8ec <__floatsisf+0x6a>
 8ca:	77 23       	and	r23, r23
 8cc:	21 f0       	breq	.+8      	; 0x8d6 <__floatsisf+0x54>
 8ce:	9e e8       	ldi	r25, 0x8E	; 142
 8d0:	87 2f       	mov	r24, r23
 8d2:	76 2f       	mov	r23, r22
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <__floatsisf+0x5e>
 8d6:	66 23       	and	r22, r22
 8d8:	71 f0       	breq	.+28     	; 0x8f6 <__floatsisf+0x74>
 8da:	96 e8       	ldi	r25, 0x86	; 134
 8dc:	86 2f       	mov	r24, r22
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	60 e0       	ldi	r22, 0x00	; 0
 8e2:	2a f0       	brmi	.+10     	; 0x8ee <__floatsisf+0x6c>
 8e4:	9a 95       	dec	r25
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	da f7       	brpl	.-10     	; 0x8e4 <__floatsisf+0x62>
 8ee:	88 0f       	add	r24, r24
 8f0:	96 95       	lsr	r25
 8f2:	87 95       	ror	r24
 8f4:	97 f9       	bld	r25, 7
 8f6:	08 95       	ret

000008f8 <__fp_inf>:
 8f8:	97 f9       	bld	r25, 7
 8fa:	9f 67       	ori	r25, 0x7F	; 127
 8fc:	80 e8       	ldi	r24, 0x80	; 128
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	08 95       	ret

00000904 <__fp_nan>:
 904:	9f ef       	ldi	r25, 0xFF	; 255
 906:	80 ec       	ldi	r24, 0xC0	; 192
 908:	08 95       	ret

0000090a <__fp_pscA>:
 90a:	00 24       	eor	r0, r0
 90c:	0a 94       	dec	r0
 90e:	16 16       	cp	r1, r22
 910:	17 06       	cpc	r1, r23
 912:	18 06       	cpc	r1, r24
 914:	09 06       	cpc	r0, r25
 916:	08 95       	ret

00000918 <__fp_pscB>:
 918:	00 24       	eor	r0, r0
 91a:	0a 94       	dec	r0
 91c:	12 16       	cp	r1, r18
 91e:	13 06       	cpc	r1, r19
 920:	14 06       	cpc	r1, r20
 922:	05 06       	cpc	r0, r21
 924:	08 95       	ret

00000926 <__fp_round>:
 926:	09 2e       	mov	r0, r25
 928:	03 94       	inc	r0
 92a:	00 0c       	add	r0, r0
 92c:	11 f4       	brne	.+4      	; 0x932 <__fp_round+0xc>
 92e:	88 23       	and	r24, r24
 930:	52 f0       	brmi	.+20     	; 0x946 <__fp_round+0x20>
 932:	bb 0f       	add	r27, r27
 934:	40 f4       	brcc	.+16     	; 0x946 <__fp_round+0x20>
 936:	bf 2b       	or	r27, r31
 938:	11 f4       	brne	.+4      	; 0x93e <__fp_round+0x18>
 93a:	60 ff       	sbrs	r22, 0
 93c:	04 c0       	rjmp	.+8      	; 0x946 <__fp_round+0x20>
 93e:	6f 5f       	subi	r22, 0xFF	; 255
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	08 95       	ret

00000948 <__fp_split3>:
 948:	57 fd       	sbrc	r21, 7
 94a:	90 58       	subi	r25, 0x80	; 128
 94c:	44 0f       	add	r20, r20
 94e:	55 1f       	adc	r21, r21
 950:	59 f0       	breq	.+22     	; 0x968 <__fp_splitA+0x10>
 952:	5f 3f       	cpi	r21, 0xFF	; 255
 954:	71 f0       	breq	.+28     	; 0x972 <__fp_splitA+0x1a>
 956:	47 95       	ror	r20

00000958 <__fp_splitA>:
 958:	88 0f       	add	r24, r24
 95a:	97 fb       	bst	r25, 7
 95c:	99 1f       	adc	r25, r25
 95e:	61 f0       	breq	.+24     	; 0x978 <__fp_splitA+0x20>
 960:	9f 3f       	cpi	r25, 0xFF	; 255
 962:	79 f0       	breq	.+30     	; 0x982 <__fp_splitA+0x2a>
 964:	87 95       	ror	r24
 966:	08 95       	ret
 968:	12 16       	cp	r1, r18
 96a:	13 06       	cpc	r1, r19
 96c:	14 06       	cpc	r1, r20
 96e:	55 1f       	adc	r21, r21
 970:	f2 cf       	rjmp	.-28     	; 0x956 <__fp_split3+0xe>
 972:	46 95       	lsr	r20
 974:	f1 df       	rcall	.-30     	; 0x958 <__fp_splitA>
 976:	08 c0       	rjmp	.+16     	; 0x988 <__fp_splitA+0x30>
 978:	16 16       	cp	r1, r22
 97a:	17 06       	cpc	r1, r23
 97c:	18 06       	cpc	r1, r24
 97e:	99 1f       	adc	r25, r25
 980:	f1 cf       	rjmp	.-30     	; 0x964 <__fp_splitA+0xc>
 982:	86 95       	lsr	r24
 984:	71 05       	cpc	r23, r1
 986:	61 05       	cpc	r22, r1
 988:	08 94       	sec
 98a:	08 95       	ret

0000098c <__fp_zero>:
 98c:	e8 94       	clt

0000098e <__fp_szero>:
 98e:	bb 27       	eor	r27, r27
 990:	66 27       	eor	r22, r22
 992:	77 27       	eor	r23, r23
 994:	cb 01       	movw	r24, r22
 996:	97 f9       	bld	r25, 7
 998:	08 95       	ret

0000099a <__mulsf3>:
 99a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__mulsf3x>
 99e:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_round>
 9a2:	0e 94 85 04 	call	0x90a	; 0x90a <__fp_pscA>
 9a6:	38 f0       	brcs	.+14     	; 0x9b6 <__mulsf3+0x1c>
 9a8:	0e 94 8c 04 	call	0x918	; 0x918 <__fp_pscB>
 9ac:	20 f0       	brcs	.+8      	; 0x9b6 <__mulsf3+0x1c>
 9ae:	95 23       	and	r25, r21
 9b0:	11 f0       	breq	.+4      	; 0x9b6 <__mulsf3+0x1c>
 9b2:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 9b6:	0c 94 82 04 	jmp	0x904	; 0x904 <__fp_nan>
 9ba:	11 24       	eor	r1, r1
 9bc:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>

000009c0 <__mulsf3x>:
 9c0:	0e 94 a4 04 	call	0x948	; 0x948 <__fp_split3>
 9c4:	70 f3       	brcs	.-36     	; 0x9a2 <__mulsf3+0x8>

000009c6 <__mulsf3_pse>:
 9c6:	95 9f       	mul	r25, r21
 9c8:	c1 f3       	breq	.-16     	; 0x9ba <__mulsf3+0x20>
 9ca:	95 0f       	add	r25, r21
 9cc:	50 e0       	ldi	r21, 0x00	; 0
 9ce:	55 1f       	adc	r21, r21
 9d0:	62 9f       	mul	r22, r18
 9d2:	f0 01       	movw	r30, r0
 9d4:	72 9f       	mul	r23, r18
 9d6:	bb 27       	eor	r27, r27
 9d8:	f0 0d       	add	r31, r0
 9da:	b1 1d       	adc	r27, r1
 9dc:	63 9f       	mul	r22, r19
 9de:	aa 27       	eor	r26, r26
 9e0:	f0 0d       	add	r31, r0
 9e2:	b1 1d       	adc	r27, r1
 9e4:	aa 1f       	adc	r26, r26
 9e6:	64 9f       	mul	r22, r20
 9e8:	66 27       	eor	r22, r22
 9ea:	b0 0d       	add	r27, r0
 9ec:	a1 1d       	adc	r26, r1
 9ee:	66 1f       	adc	r22, r22
 9f0:	82 9f       	mul	r24, r18
 9f2:	22 27       	eor	r18, r18
 9f4:	b0 0d       	add	r27, r0
 9f6:	a1 1d       	adc	r26, r1
 9f8:	62 1f       	adc	r22, r18
 9fa:	73 9f       	mul	r23, r19
 9fc:	b0 0d       	add	r27, r0
 9fe:	a1 1d       	adc	r26, r1
 a00:	62 1f       	adc	r22, r18
 a02:	83 9f       	mul	r24, r19
 a04:	a0 0d       	add	r26, r0
 a06:	61 1d       	adc	r22, r1
 a08:	22 1f       	adc	r18, r18
 a0a:	74 9f       	mul	r23, r20
 a0c:	33 27       	eor	r19, r19
 a0e:	a0 0d       	add	r26, r0
 a10:	61 1d       	adc	r22, r1
 a12:	23 1f       	adc	r18, r19
 a14:	84 9f       	mul	r24, r20
 a16:	60 0d       	add	r22, r0
 a18:	21 1d       	adc	r18, r1
 a1a:	82 2f       	mov	r24, r18
 a1c:	76 2f       	mov	r23, r22
 a1e:	6a 2f       	mov	r22, r26
 a20:	11 24       	eor	r1, r1
 a22:	9f 57       	subi	r25, 0x7F	; 127
 a24:	50 40       	sbci	r21, 0x00	; 0
 a26:	9a f0       	brmi	.+38     	; 0xa4e <__mulsf3_pse+0x88>
 a28:	f1 f0       	breq	.+60     	; 0xa66 <__mulsf3_pse+0xa0>
 a2a:	88 23       	and	r24, r24
 a2c:	4a f0       	brmi	.+18     	; 0xa40 <__mulsf3_pse+0x7a>
 a2e:	ee 0f       	add	r30, r30
 a30:	ff 1f       	adc	r31, r31
 a32:	bb 1f       	adc	r27, r27
 a34:	66 1f       	adc	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	88 1f       	adc	r24, r24
 a3a:	91 50       	subi	r25, 0x01	; 1
 a3c:	50 40       	sbci	r21, 0x00	; 0
 a3e:	a9 f7       	brne	.-22     	; 0xa2a <__mulsf3_pse+0x64>
 a40:	9e 3f       	cpi	r25, 0xFE	; 254
 a42:	51 05       	cpc	r21, r1
 a44:	80 f0       	brcs	.+32     	; 0xa66 <__mulsf3_pse+0xa0>
 a46:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_inf>
 a4a:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_szero>
 a4e:	5f 3f       	cpi	r21, 0xFF	; 255
 a50:	e4 f3       	brlt	.-8      	; 0xa4a <__mulsf3_pse+0x84>
 a52:	98 3e       	cpi	r25, 0xE8	; 232
 a54:	d4 f3       	brlt	.-12     	; 0xa4a <__mulsf3_pse+0x84>
 a56:	86 95       	lsr	r24
 a58:	77 95       	ror	r23
 a5a:	67 95       	ror	r22
 a5c:	b7 95       	ror	r27
 a5e:	f7 95       	ror	r31
 a60:	e7 95       	ror	r30
 a62:	9f 5f       	subi	r25, 0xFF	; 255
 a64:	c1 f7       	brne	.-16     	; 0xa56 <__mulsf3_pse+0x90>
 a66:	fe 2b       	or	r31, r30
 a68:	88 0f       	add	r24, r24
 a6a:	91 1d       	adc	r25, r1
 a6c:	96 95       	lsr	r25
 a6e:	87 95       	ror	r24
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret

00000a74 <__divmodhi4>:
 a74:	97 fb       	bst	r25, 7
 a76:	07 2e       	mov	r0, r23
 a78:	16 f4       	brtc	.+4      	; 0xa7e <__divmodhi4+0xa>
 a7a:	00 94       	com	r0
 a7c:	07 d0       	rcall	.+14     	; 0xa8c <__divmodhi4_neg1>
 a7e:	77 fd       	sbrc	r23, 7
 a80:	09 d0       	rcall	.+18     	; 0xa94 <__divmodhi4_neg2>
 a82:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__udivmodhi4>
 a86:	07 fc       	sbrc	r0, 7
 a88:	05 d0       	rcall	.+10     	; 0xa94 <__divmodhi4_neg2>
 a8a:	3e f4       	brtc	.+14     	; 0xa9a <__divmodhi4_exit>

00000a8c <__divmodhi4_neg1>:
 a8c:	90 95       	com	r25
 a8e:	81 95       	neg	r24
 a90:	9f 4f       	sbci	r25, 0xFF	; 255
 a92:	08 95       	ret

00000a94 <__divmodhi4_neg2>:
 a94:	70 95       	com	r23
 a96:	61 95       	neg	r22
 a98:	7f 4f       	sbci	r23, 0xFF	; 255

00000a9a <__divmodhi4_exit>:
 a9a:	08 95       	ret

00000a9c <__udivmodhi4>:
 a9c:	aa 1b       	sub	r26, r26
 a9e:	bb 1b       	sub	r27, r27
 aa0:	51 e1       	ldi	r21, 0x11	; 17
 aa2:	07 c0       	rjmp	.+14     	; 0xab2 <__udivmodhi4_ep>

00000aa4 <__udivmodhi4_loop>:
 aa4:	aa 1f       	adc	r26, r26
 aa6:	bb 1f       	adc	r27, r27
 aa8:	a6 17       	cp	r26, r22
 aaa:	b7 07       	cpc	r27, r23
 aac:	10 f0       	brcs	.+4      	; 0xab2 <__udivmodhi4_ep>
 aae:	a6 1b       	sub	r26, r22
 ab0:	b7 0b       	sbc	r27, r23

00000ab2 <__udivmodhi4_ep>:
 ab2:	88 1f       	adc	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	5a 95       	dec	r21
 ab8:	a9 f7       	brne	.-22     	; 0xaa4 <__udivmodhi4_loop>
 aba:	80 95       	com	r24
 abc:	90 95       	com	r25
 abe:	bc 01       	movw	r22, r24
 ac0:	cd 01       	movw	r24, r26
 ac2:	08 95       	ret

00000ac4 <_exit>:
 ac4:	f8 94       	cli

00000ac6 <__stop_program>:
 ac6:	ff cf       	rjmp	.-2      	; 0xac6 <__stop_program>
